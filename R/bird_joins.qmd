

```{r}
library(tidyverse)
```


   Create a new .qmd in your R folder saved as bird_joins.qmd
   
  Read in the data sets and store the data frames as bird_observations, sites, surveys, and taxalist (it should be clear from the raw file names which is which)
    
  Create a subset of bird_observations called birds_subset that only contains observations for birds with species id “BHCO” and “RWBL”, and from sites with site ID “LI-W” and “NU-C”

```{r}
bird_observations <- read_csv(here::here("data", "52_pp52_birds_1.csv"))

sites <- read_csv(here::here("data", "52_pp52_sites_1.csv"))

surveys <- read_csv(here::here("data", "52_pp52_surveys_1.csv"))

taxalist <- read_csv(here::here("data", "52_pp52_taxalist_1.csv"))

birds_subset <- bird_observations %>% 
  filter(species_id == "BHCO" | species_id == "RWBL", 
         site_id == "LI-W" | site_id == "NU-C") #try with %in% next time

```


```{r}
#left join
birds_left <- left_join(birds_subset, sites)
birds_left_2 <- left_join(birds_left, taxalist)
```



  First, answer: what do you expect a full_join() between birds_subset and sites to contain?
  I would expect a full join to include all information found in the sites table. This would include all the park id in the new table. those that are in the subset table will have most data than the others

  Write code to full_join the birds_subset and sites data into a new object called birds_full. Explicitly include the variable you’re joining by. Look at the output. Is it what you expected?



```{r}
#full_join
birds_full <- full_join(birds_subset, sites, by = "site_id")
```

# Task 2



    Starting with your birds object, rename the notes column to bird_obs_notes (so this doesn’t conflict with notes in the surveys dataset

    Then, create a subset that contains all observations in the birds dataset, joins the taxonomic, site and survey information to it, and is finally limited to only columns survey_date, common_name, park_name, and bird_count. You can decide the order that you want to create this in (e.g. limit the columns first, then join, or the other way around).

    Use lubridate::month() to add a new column called survey_month, containing only the month number. Then, convert the month number to a factor (again within mutate())

    Learn a new function on your own! Use dplyr::relocate() to move the new survey_month column to immediately after the survey_date column. You can do this in a separate code chunk, or pipe straight into it from your existing code.

    Find the total number of birds observed by park and month (i.e., you’ll group_by(park_name, survey_month))

    Filter to only include parks “Lindo”, “Orme”, “Palomino” and “Sonrisa”


```{r}
rename(bird_observations, bird_obs_notes = notes)


birds_full_2 <- full_join(bird_observations, sites, by = "site_id")
birds_full_3 <- full_join(birds_full_2, surveys, by = "site_id")
birds_full_4 <- full_join(birds_full_3, taxalist, by = "species_id")

birds_filter <- birds_full_4 %>% 
  select(survey_date, common_name, park_name, bird_count) %>% 
  mutate(survey_month = lubridate::month(survey_date)) %>% 
  relocate(survey_month, .after = survey_date) %>% 
  group_by(park_name, survey_month) %>% 
  summarise(observed = n()) %>% 
  filter(park_name %in% c("Lindo", "Orme", "Palomino", "Sonrisa"))

```

# Task 3




